// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://kzyhpkspychlgtegavyb.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt6eWhwa3NweWNobGd0ZWdhdnliIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjA1MzQ4MzIsImV4cCI6MjA3NjExMDgzMn0.8aVlQAeAejyLtt1IAKw-dWt2R2XFSv8XAI9nVhAclaA';

const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let currentChat = null;
let allUsers = [];
let userChats = [];

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–¥–≤–∏–∂–Ω–æ–≥–æ –º–µ–Ω—é
function toggleSlideMenu() {
    const menu = document.getElementById('sidebarMenu');
    const backdrop = document.getElementById('menuBackdrop') || createBackdrop();
    
    if (menu.classList.contains('active')) {
        closeSidebarMenu();
    } else {
        openSidebarMenu();
    }
}

function createBackdrop() {
    const backdrop = document.createElement('div');
    backdrop.className = 'menu-backdrop';
    backdrop.id = 'menuBackdrop';
    backdrop.onclick = closeSidebarMenu;
    document.body.appendChild(backdrop);
    return backdrop;
}

async function openSidebarMenu() {
    const menu = document.getElementById('sidebarMenu');
    const backdrop = document.getElementById('menuBackdrop') || createBackdrop();
    
    menu.classList.add('active');
    backdrop.classList.add('active');
    
    const profile = await getCurrentUserProfile();
    if (profile) {
        const avatarElement = document.getElementById('sidebarUserAvatar');
        if (profile.avatar_url) {
            avatarElement.innerHTML = `<img src="${profile.avatar_url}" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">`;
        } else {
            avatarElement.textContent = profile.first_name ? profile.first_name[0].toUpperCase() : (profile.username ? profile.username[0].toUpperCase() : 'U');
        }
        document.getElementById('sidebarUsername').textContent = profile.first_name || profile.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
    document.getElementById('sidebarUserEmail').textContent = currentUser?.email || '';
}

function closeSidebarMenu() {
    const menu = document.getElementById('sidebarMenu');
    const backdrop = document.getElementById('menuBackdrop');
    
    menu.classList.remove('active');
    if (backdrop) {
        backdrop.classList.remove('active');
    }
}

// Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showToast(message, type = 'info', duration = 4000) {
    const toastContainer = document.getElementById('toastContainer');
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è'
    };
    
    toast.innerHTML = `
        <div class="toast-icon">${icons[type] || icons.info}</div>
        <div class="toast-message">${message}</div>
        <button class="toast-close" onclick="this.parentElement.remove()">‚úï</button>
    `;
    
    toastContainer.appendChild(toast);
    
    setTimeout(() => {
        if (toast.parentElement) {
            toast.classList.add('hiding');
            setTimeout(() => toast.remove(), 300);
        }
    }, duration);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å
async function showMyProfile() {
    closeSidebarMenu();
    
    const profile = await getCurrentUserProfile();
    
    const modalHTML = `
        <div class="modal-overlay" id="myProfileModal" style="display: flex;">
            <div class="modal-content" style="max-width: 500px; max-height: 90vh; padding: 0; overflow: hidden;">
                <div class="profile-header-dynamic">
                    <!-- –ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ–Ω –Ω–∞ –≤—Å—é –∞–≤–∞—Ç–∞—Ä–∫—É -->
                    <div class="profile-background"></div>
                    
                    <!-- –ö–Ω–æ–ø–∫–∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É -->
                    <div style="position: absolute; top: 20px; right: 20px; display: flex; gap: 10px; z-index: 20;">
                        <button class="edit-profile-btn" onclick="showProfileSettings()" style="background: rgba(255,255,255,0.9); border: none; padding: 10px 15px; border-radius: 20px; font-weight: bold; cursor: pointer; backdrop-filter: blur(10px); white-space: nowrap;">
                            ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                        </button>
                        <button class="close-profile-btn" onclick="closeModalWithAnimation('myProfileModal')" style="background: rgba(255,255,255,0.9); border: none; width: 40px; height: 40px; border-radius: 50%; font-weight: bold; cursor: pointer; backdrop-filter: blur(10px); display: flex; align-items: center; justify-content: center; font-size: 18px;">
                            ‚úï
                        </button>
                    </div>
                    
                    <!-- –ê–í–ê–¢–ê–†–ö–ê - –û–ß–ï–ù–¨ –í–´–°–û–ö–ê–Ø –ò –ë–û–õ–¨–®–ê–Ø -->
                    <div class="profile-avatar-dynamic-super-high" onclick="document.getElementById('avatarUpload').click()">
                        ${profile?.avatar_url ? 
                            `<img src="${profile.avatar_url}">` :
                            `<div style="width: 100%; height: 100%; border-radius: 20px; background: linear-gradient(135deg, #3498db 0%, #2980b9 100%); display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 48px;">
                                ${profile?.first_name ? profile.first_name[0].toUpperCase() : (profile?.username ? profile.username[0].toUpperCase() : 'U')}
                            </div>`
                        }
                    </div>
                    <input type="file" id="avatarUpload" accept="image/*" style="display: none;" onchange="uploadAvatar(this.files[0])">
                    
                    <!-- –ò–ú–Ø –†–Ø–î–û–ú –° –ê–í–ê–¢–ê–†–ö–û–ô (–ü–û–ö–ê–ó–´–í–ê–ï–¢–°–Ø –¢–û–õ–¨–ö–û –ü–†–ò –°–í–ï–†–¢–´–í–ê–ù–ò–ò) -->
                    <div class="avatar-name-collapsed">
                        ${profile?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                    </div>
                </div>
                
                <div class="profile-content-scroll" id="profileScrollContainer">
                    <!-- –¢–ï–ö–°–¢ –ü–û–î–ù–Ø–¢ –í–´–®–ï -->
                    <div class="profile-top-info-super-high">
                        <h3 class="profile-name">${profile?.first_name || ''} ${profile?.last_name || ''}</h3>
                        <div class="username-copy" onclick="copyUsername('${profile?.username || 'username'}')">
                            @${profile?.username || 'username'}
                            <span class="copy-hint">üìã</span>
                        </div>
                    </div>

                    <!-- –ò–ù–§–û–†–ú–ê–¶–ò–Ø -->
                    <div class="profile-info-new-format">
                        ${profile?.bio ? `
                        <div class="profile-info-section">
                            <div class="profile-info-label-full">–û —Å–µ–±–µ</div>
                            <div class="profile-info-value-full">${profile.bio}</div>
                        </div>
                        ` : ''}

                        ${profile?.phone ? `
                        <div class="profile-info-row-new">
                            <div class="profile-info-label-new">–¢–µ–ª–µ—Ñ–æ–Ω</div>
                            <div class="profile-info-value-new clickable-phone" onclick="copyPhone('${profile.phone}')">
                                ${profile.phone}
                                <span class="copy-hint-small">üìã</span>
                            </div>
                        </div>
                        ` : ''}

                        <div class="profile-info-row-new">
                            <div class="profile-info-label-new">ID</div>
                            <div class="profile-info-value-new clickable-id" onclick="copyId('${currentUser.id}')">
                                ${currentUser.id.substring(0, 8)}...
                                <span class="copy-hint-small">üìã</span>
                            </div>
                        </div>

                        ${profile?.birthday ? `
                        <div class="profile-info-row-new">
                            <div class="profile-info-label-new">–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</div>
                            <div class="profile-info-value-new">${new Date(profile.birthday).toLocaleDateString('ru-RU')}</div>
                        </div>
                        ` : ''}
                    </div>

                    <!-- –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–æ–ª–ª–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ -->
                    <div style="height: 800px; background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%); display: flex; align-items: center; justify-content: center; margin: 20px -15px -30px -15px; border-radius: 20px 20px 0 0;">
                        <div style="text-align: center; color: #666;">
                            <div style="font-size: 48px; margin-bottom: 15px;">‚¨áÔ∏è</div>
                            <div>–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–µ –≤–Ω–∏–∑ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–∞–∫ –∞–≤–∞—Ç–∞—Ä–∫–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∫—Ä—É–≥</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
    setTimeout(() => {
        const profileScroll = document.getElementById('profileScrollContainer');
        const avatar = document.querySelector('.profile-avatar-dynamic-super-high');
        const avatarName = document.querySelector('.avatar-name-collapsed');
        const header = document.querySelector('.profile-header-dynamic');
        
        if (profileScroll && avatar && avatarName && header) {
            profileScroll.style.overflowY = 'auto';
            
            profileScroll.addEventListener('scroll', function() {
                if (this.scrollTop > 50) {
                    // –°–í–ï–†–ù–£–¢–û–ï –°–û–°–¢–û–Ø–ù–ò–ï - –∞–≤–∞—Ç–∞—Ä–∫–∞ –∫—Ä—É–≥ + –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è
                    avatar.classList.add('collapsed');
                    avatarName.classList.add('visible');
                    header.classList.add('collapsed'); 
                } else {
                    // –†–ê–ó–í–ï–†–ù–£–¢–û–ï –°–û–°–¢–û–Ø–ù–ò–ï - –∞–≤–∞—Ç–∞—Ä–∫–∞ –±–æ–ª—å—à–∞—è + —Å–∫—Ä—ã–≤–∞–µ–º –∏–º—è
                    avatar.classList.remove('collapsed');
                    avatarName.classList.remove('visible');
                    header.classList.remove('collapsed');
                }
            });
        }
    }, 100);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
function copyPhone(phone) {
    navigator.clipboard.writeText(phone).then(() => {
        showToast(`–¢–µ–ª–µ—Ñ–æ–Ω ${phone} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`, 'success');
    }).catch(err => {
        const textArea = document.createElement('textarea');
        textArea.value = phone;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showToast(`–¢–µ–ª–µ—Ñ–æ–Ω ${phone} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`, 'success');
    });
}

function copyId(id) {
    navigator.clipboard.writeText(id).then(() => {
        showToast(`ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`, 'success');
    }).catch(err => {
        const textArea = document.createElement('textarea');
        textArea.value = id;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showToast(`ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`, 'success');
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserProfile(userId) {
    try {
        const { data: profile, error } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', userId)
            .single();
            
        if (error) throw error;
        
        const modalHTML = `
            <div class="modal-overlay" id="userProfileModal" style="display: flex;">
                <div class="modal-content" style="max-width: 500px; max-height: 90vh; padding: 0; overflow: hidden;">
                    <div class="profile-header-dynamic">
                        <!-- –ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ–Ω –Ω–∞ –≤—Å—é –∞–≤–∞—Ç–∞—Ä–∫—É -->
                        <div class="profile-background"></div>
                        
                        <!-- –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ -->
                        <div style="position: absolute; top: 20px; right: 20px; display: flex; gap: 10px; z-index: 20;">
                            <button class="close-profile-btn" onclick="closeModalWithAnimation('userProfileModal')" style="background: rgba(255,255,255,0.9); border: none; width: 40px; height: 40px; border-radius: 50%; font-weight: bold; cursor: pointer; backdrop-filter: blur(10px); display: flex; align-items: center; justify-content: center; font-size: 18px;">
                                ‚úï
                            </button>
                        </div>
                        
                        <!-- –ê–í–ê–¢–ê–†–ö–ê –ü–û–î–ù–Ø–¢–ê –û–ß–ï–ù–¨ –í–´–°–û–ö–û - –ù–ê –£–†–û–í–ù–ï –° –ö–ù–û–ü–ö–ê–ú–ò -->
                        <div class="profile-avatar-dynamic-high">
                            ${profile?.avatar_url ? 
                                `<img src="${profile.avatar_url}">` :
                                `<div style="width: 100%; height: 100%; border-radius: 20px; background: linear-gradient(135deg, #3498db 0%, #2980b9 100%); display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 48px;">
                                    ${profile?.first_name ? profile.first_name[0].toUpperCase() : (profile?.username ? profile.username[0].toUpperCase() : 'U')}
                                </div>`
                            }
                        </div>
                    </div>
                    
                    <div class="profile-content-scroll" id="profileScrollContainerOther">
                        <!-- –ò–ú–Ø, –§–ê–ú–ò–õ–ò–Ø, USERNAME –ü–û–î–ù–Ø–¢–´ –í–´–°–û–ö–û - –ü–û–î –ù–ê–ß–ê–õ–û –ë–ï–õ–û–ì–û –§–û–ù–ê -->
                        <div class="profile-top-info">
                            <h3 class="profile-name">${profile?.first_name || ''} ${profile?.last_name || ''}</h3>
                            <div class="username-copy" onclick="copyUsername('${profile?.username || 'username'}')">
                                @${profile?.username || 'username'}
                                <span class="copy-hint">üìã</span>
                            </div>
                            ${profile?.bio ? `<div class="profile-bio">"${profile.bio}"</div>` : ''}
                        </div>

                        <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ -->
                        <div class="profile-info-vertical">
                            <div class="profile-info-item">
                                <div class="profile-info-label">–ò–º—è</div>
                                <div class="profile-info-value">${profile?.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                            </div>
                            <div class="profile-info-item">
                                <div class="profile-info-label">–§–∞–º–∏–ª–∏—è</div>
                                <div class="profile-info-value">${profile?.last_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
                            </div>
                            ${profile?.phone ? `
                            <div class="profile-info-item">
                                <div class="profile-info-label">–¢–µ–ª–µ—Ñ–æ–Ω</div>
                                <div class="profile-info-value">${profile.phone}</div>
                            </div>
                            ` : ''}
                            ${profile?.birthday ? `
                            <div class="profile-info-item">
                                <div class="profile-info-label">–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</div>
                                <div class="profile-info-value">${new Date(profile.birthday).toLocaleDateString('ru-RU')}</div>
                            </div>
                            ` : ''}
                            ${profile?.bio ? `
                            <div class="profile-info-item">
                                <div class="profile-info-label">–û —Å–µ–±–µ</div>
                                <div class="profile-info-value">${profile.bio}</div>
                            </div>
                            ` : ''}
                        </div>

                        <!-- –ö–Ω–æ–ø–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ -->
                        <div style="padding: 20px;">
                            <button class="modal-btn primary" onclick="startPrivateChat('${profile.id}', '${profile.first_name || profile.username}')" style="width: 100%; padding: 15px; font-size: 16px;">
                                üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
        setTimeout(() => {
            const profileScroll = document.getElementById('profileScrollContainerOther');
            const avatar = document.querySelector('.profile-avatar-dynamic-high');
            
            if (profileScroll && avatar) {
                // –í–∫–ª—é—á–∞–µ–º —Å–∫—Ä–æ–ª–ª
                profileScroll.style.overflowY = 'auto';
                
                profileScroll.addEventListener('scroll', function() {
                    if (this.scrollTop > 50) {
                        avatar.classList.add('collapsed');
                    } else {
                        avatar.classList.remove('collapsed');
                    }
                });
            }
        }, 100);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è username
function copyUsername(username) {
    navigator.clipboard.writeText(username).then(() => {
        showToast(`Username @${username} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`, 'success');
    }).catch(err => {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = username;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showToast(`Username @${username} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`, 'success');
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
async function showProfileSettings() {
    closeAllModalsWithAnimation();
    
    const profile = await getCurrentUserProfile();
    
    const modalHTML = `
        <div class="modal-overlay" id="profileSettingsModal" style="display: flex;">
            <div class="modal-content" style="max-width: 500px; max-height: 90vh; overflow-y: auto;">
                <h2 class="modal-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</h2>
                
                <!-- –ê–≤–∞—Ç–∞—Ä–∫–∞ -->
                <div style="text-align: center; margin-bottom: 20px;">
                    <div class="profile-avatar-large" onclick="document.getElementById('avatarUpload').click()">
                        ${profile?.avatar_url ? 
                            `<img src="${profile.avatar_url}" style="width: 100%; height: 100%; border-radius: 20px; object-fit: cover;">` :
                            `<div style="width: 100%; height: 100%; border-radius: 20px; background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%); display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 48px;">
                                ${profile?.first_name ? profile.first_name[0].toUpperCase() : (profile?.username ? profile.username[0].toUpperCase() : 'U')}
                            </div>`
                        }
                    </div>
                    <input type="file" id="avatarUpload" accept="image/jpeg,image/png,image/webp,image/gif" style="display: none;" onchange="uploadAvatar(this.files[0])">
                    <div style="color: #666; font-size: 12px;">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ (–¥–æ 10MB)</div>
                </div>

                <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div style="margin-bottom: 25px;">
                    <h3 style="color: #2c3e50; margin-bottom: 15px; border-bottom: 1px solid #eee; padding-bottom: 8px;">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 10px;">
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: bold; color: #2c3e50;">–ò–º—è *</label>
                            <input type="text" class="modal-input" id="firstNameInput" value="${profile?.first_name || ''}" placeholder="–í–∞—à–µ –∏–º—è">
                        </div>
                        <div>
                            <label style="display: block; margin-bottom: 5px; font-weight: bold; color: #2c3e50;">–§–∞–º–∏–ª–∏—è</label>
                            <input type="text" class="modal-input" id="lastNameInput" value="${profile?.last_name || ''}" placeholder="–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è">
                        </div>
                    </div>
                    
                    <div style="margin-bottom: 10px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: bold; color: #2c3e50;">Username *</label>
                        <input type="text" class="modal-input" id="usernameInput" value="${profile?.username || ''}" placeholder="username">
                    </div>
                    
                    <div style="margin-bottom: 10px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: bold; color: #2c3e50;">Email</label>
                        <input type="email" class="modal-input" value="${currentUser?.email || ''}" disabled style="background: #f5f5f5;">
                    </div>
                </div>

                <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div style="margin-bottom: 25px;">
                    <h3 style="color: #2c3e50; margin-bottom: 15px; border-bottom: 1px solid #eee; padding-bottom: 8px;">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                    
                    <div style="margin-bottom: 10px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: bold; color: #2c3e50;">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                        <input type="tel" class="modal-input" id="phoneInput" value="${profile?.phone || ''}" placeholder="+7 (999) 999-99-99">
                    </div>
                    
                    <div style="margin-bottom: 10px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: bold; color: #2c3e50;">–û —Å–µ–±–µ</label>
                        <textarea class="modal-input" id="bioInput" placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..." style="height: 80px; resize: vertical;">${profile?.bio || ''}</textarea>
                    </div>
                    
                    <div style="margin-bottom: 10px;">
                        <label style="display: block; margin-bottom: 5px; font-weight: bold; color: #2c3e50;">–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è</label>
                        <input type="date" class="modal-input" id="birthdayInput" value="${profile?.birthday || ''}">
                    </div>
                </div>

                <div class="modal-buttons">
                    <button class="modal-btn secondary" onclick="closeModalWithAnimation('profileSettingsModal')">–û—Ç–º–µ–Ω–∞</button>
                    <button class="modal-btn primary" onclick="saveProfileSettings()">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
async function uploadAvatar(file) {
    if (!file) return;
    
    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
    if (!allowedTypes.includes(file.type)) {
        showToast('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ JPEG, PNG, WebP –∏ GIF —Ñ–∞–π–ª—ã!', 'warning');
        return;
    }
    
    if (file.size > 10 * 1024 * 1024) {
        showToast('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB', 'warning');
        return;
    }
    
    const fileExtension = file.name.split('.').pop().toLowerCase();
    const allowedExtensions = ['jpg', 'jpeg', 'png', 'webp', 'gif'];
    if (!allowedExtensions.includes(fileExtension)) {
        showToast('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞!', 'warning');
        return;
    }
    
    try {
        showToast('–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏...', 'info');
        
        const fileExt = file.name.split('.').pop();
        const fileName = `${currentUser.id}/avatar-${Date.now()}.${fileExt}`;
        
        const { data, error } = await supabase.storage
            .from('avatars')
            .upload(fileName, file, {
                cacheControl: '3600',
                upsert: true
            });
            
        if (error) {
            if (error.message.includes('bucket')) {
                showToast('–û—à–∏–±–∫–∞: –±–∞–∫–µ—Ç –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.', 'error');
            } else {
                throw error;
            }
            return;
        }
        
        const { data: { publicUrl } } = supabase.storage
            .from('avatars')
            .getPublicUrl(fileName);
            
        const { error: updateError } = await supabase
            .from('profiles')
            .update({ 
                avatar_url: publicUrl,
                updated_at: new Date().toISOString()
            })
            .eq('id', currentUser.id);
            
        if (updateError) throw updateError;
        
        updateAllAvatars(publicUrl);
        
        showToast('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
        showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–∫
function updateAllAvatars(avatarUrl) {
    // –í –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è
    const modalAvatars = document.querySelectorAll('.profile-avatar-large, .profile-avatar-small, #modalUserAvatar');
    modalAvatars.forEach(avatar => {
        avatar.innerHTML = `<img src="${avatarUrl}" style="width: 100%; height: 100%; border-radius: inherit; object-fit: cover;">`;
    });
    
    // –í —Å–∞–π–¥–±–∞—Ä–µ –∏ –º–µ–Ω—é
    document.getElementById('userAvatar').innerHTML = `<img src="${avatarUrl}" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">`;
    
    const sidebarAvatar = document.getElementById('sidebarUserAvatar');
    if (sidebarAvatar) {
        sidebarAvatar.innerHTML = `<img src="${avatarUrl}" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">`;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è
async function saveProfileSettings() {
    const firstName = document.getElementById('firstNameInput').value.trim();
    const lastName = document.getElementById('lastNameInput').value.trim();
    const username = document.getElementById('usernameInput').value.trim();
    const phone = document.getElementById('phoneInput').value.trim();
    const bio = document.getElementById('bioInput').value.trim();
    const birthday = document.getElementById('birthdayInput').value;
    
    
    if (!firstName) {
        showToast('–í–≤–µ–¥–∏—Ç–µ –∏–º—è!', 'warning');
        return;
    }
    
    if (!username) {
        showToast('–í–≤–µ–¥–∏—Ç–µ username!', 'warning');
        return;
    }
    
    if (username.length < 3) {
        showToast('Username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤', 'warning');
        return;
    }
    
    try {
        const profile = await getCurrentUserProfile();
        if (username !== profile?.username) {
            const { data: existingUser } = await supabase
                .from('profiles')
                .select('id')
                .eq('username', username)
                .neq('id', currentUser.id)
                .single();
                
            if (existingUser) {
                showToast('–≠—Ç–æ—Ç username —É–∂–µ –∑–∞–Ω—è—Ç!', 'warning');
                return;
            }
        }
        
        const updates = {
            first_name: firstName,
            last_name: lastName,
            username: username,
            phone: phone || null,
            bio: bio || null,
            birthday: birthday || null
        };
        
        const { error } = await supabase
            .from('profiles')
            .update(updates)
            .eq('id', currentUser.id);
            
        if (error) {
            if (error.message.includes('updated_at')) {
                const { error: retryError } = await supabase
                    .from('profiles')
                    .update({
                        first_name: firstName,
                        last_name: lastName,
                        username: username,
                        phone: phone || null,
                        bio: bio || null,
                        birthday: birthday || null
                    })
                    .eq('id', currentUser.id);
                    
                if (retryError) throw retryError;
            } else {
                throw error;
            }
        }
        
        showToast('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
        closeModalWithAnimation('profileSettingsModal');
        
        await loadUserProfile();
        await loadUsersForSidebar();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    }
}

// –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function searchUsers() {
    const searchTerm = document.getElementById('searchInput').value.trim();
    
    if (searchTerm.length === 0) {
        if (allUsers.length === 0) {
            document.getElementById('chatsList').innerHTML = `
                <div class="chat-item">
                    <div class="chat-info">
                        <div class="chat-avatar">üë•</div>
                        <div class="chat-details">
                            <div class="chat-name">–ù–µ—Ç –Ω–∞—á–∞—Ç—ã—Ö —á–∞—Ç–æ–≤</div>
                            <div class="last-message">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</div>
                        </div>
                    </div>
                </div>
            `;
            return;
        }
        
        showUserList(allUsers, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        return;
    }

    let searchResults = [];

    // –ü–æ–∏—Å–∫ –ø–æ username (–µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)
    if (searchTerm.startsWith('@')) {
        const username = searchTerm.substring(1).toLowerCase();
        const { data: users, error } = await supabase
            .from('profiles')
            .select('*')
            .ilike('username', `%${username}%`)
            .neq('id', currentUser.id)
            .limit(10);

        if (!error && users) {
            searchResults = users.map(user => ({
                ...user,
                displayName: user.first_name || user.username,
                searchType: 'username'
            }));
        }
    }
    // –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã –∏ >= 10 —Å–∏–º–≤–æ–ª–æ–≤)
    else if (/\d/.test(searchTerm) && searchTerm.replace(/\D/g, '').length >= 10) {
        const phoneDigits = searchTerm.replace(/\D/g, '');
        const { data: users, error } = await supabase
            .from('profiles')
            .select('*')
            .neq('id', currentUser.id)
            .limit(10);

        if (!error && users) {
            // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            const exactMatches = users.filter(user => 
                user.phone && user.phone.replace(/\D/g, '').includes(phoneDigits)
            );
            
            // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –Ω–æ–º–µ—Ä–∞ (–ø–µ—Ä–≤—ã–µ 3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
            const similarMatches = users.filter(user => 
                user.phone && user.phone.replace(/\D/g, '').length >= 10
            ).slice(0, 3);

            searchResults = [...exactMatches, ...similarMatches].map(user => ({
                ...user,
                displayName: user.first_name || user.username,
                searchType: 'phone'
            }));
        }
    }
    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
    else {
        const { data: users, error } = await supabase
            .from('profiles')
            .select('*')
            .or(`first_name.ilike.%${searchTerm}%,username.ilike.%${searchTerm}%`)
            .neq('id', currentUser.id)
            .limit(10);

        if (!error && users) {
            searchResults = users.map(user => ({
                ...user,
                displayName: user.first_name || user.username,
                searchType: 'name'
            }));
        }
    }

    showSearchResults(searchResults, searchTerm);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
function showSearchResults(users, searchTerm) {
    let usersHTML = '';
    
    if (users.length === 0) {
        usersHTML = `
            <div class="chat-item">
                <div class="chat-info">
                    <div class="chat-avatar">üîç</div>
                    <div class="chat-details">
                        <div class="chat-name">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>
                        <div class="last-message">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å</div>
                    </div>
                </div>
            </div>
        `;
    } else {
        users.forEach(user => {
            const avatarContent = user.avatar_url ? 
                `<img src="${user.avatar_url}" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">` :
                user.displayName[0].toUpperCase();

            usersHTML += `
                <div class="search-result-item" onclick="handleSearchResultClick('${user.id}', '${user.displayName}')">
                    <div class="search-result-avatar">
                        ${avatarContent}
                    </div>
                    <div class="search-result-info">
                        <div class="search-result-name">${user.displayName}</div>
                        <div class="search-result-username">@${user.username}</div>
                        ${user.phone ? `<div class="search-result-phone">${user.phone}</div>` : ''}
                    </div>
                    <div class="start-chat-indicator">
                        üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç
                    </div>
                </div>
            `;
        });
    }

    document.getElementById('chatsList').innerHTML = usersHTML;
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ–∏—Å–∫–∞
function handleSearchResultClick(userId, username) {
    startPrivateChat(userId, username);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function showAppSettings() {
    closeSidebarMenu();
    showToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!', 'info');
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —á–∞—Ç—ã
function showMyChats() {
    closeSidebarMenu();
    showToast(`–£ –≤–∞—Å ${userChats.length} —á–∞—Ç–æ–≤`, 'info');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
function showAppearanceSettings() {
    closeSidebarMenu();
    showToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!', 'info');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotificationSettings() {
    closeSidebarMenu();
    showToast('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!', 'info');
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
function closeModalWithAnimation(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        const overlay = modal.querySelector('.modal-overlay');
        const content = modal.querySelector('.modal-content');
        
        if (overlay) overlay.classList.add('closing');
        if (content) content.classList.add('closing');
        
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
function closeAllModalsWithAnimation() {
    document.querySelectorAll('.modal-overlay').forEach(modal => {
        const overlay = modal.querySelector('.modal-overlay');
        const content = modal.querySelector('.modal-content');
        
        if (overlay) overlay.classList.add('closing');
        if (content) content.classList.add('closing');
        
        setTimeout(() => {
            modal.remove();
        }, 300);
    });
}

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getCurrentUserProfile() {
    try {
        const { data: profile, error } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', currentUser.id)
            .single();
            
        if (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            return null;
        }
        return profile;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        return null;
    }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function sendSystemMessage(chatId, text) {
    try {
        const { error } = await supabase
            .from('messages')
            .insert([{
                chat_id: chatId,
                sender_id: currentUser.id,
                text: text,
                is_system: true
            }]);

        if (error) throw error;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}

// –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç
async function leaveChat() {
    if (!currentChat) {
        showToast('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞', 'warning');
        return;
    }

    const modalHTML = `
        <div class="modal-overlay" id="confirmLeaveModal" style="display: flex;">
            <div class="modal-content">
                <h2 class="modal-title">–ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç</h2>
                <p>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç "${currentChat.name}"?</p>
                <div class="modal-buttons">
                    <button class="modal-btn secondary" onclick="closeModalWithAnimation('confirmLeaveModal')">–û—Ç–º–µ–Ω–∞</button>
                    <button class="modal-btn primary" onclick="confirmLeaveChat()">–ü–æ–∫–∏–Ω—É—Ç—å</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

async function confirmLeaveChat() {
    try {
        const { error } = await supabase
            .from('chat_members')
            .delete()
            .eq('chat_id', currentChat.id)
            .eq('user_id', currentUser.id);

        if (error) throw error;

        const profile = await getCurrentUserProfile();
        const username = profile?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        await sendSystemMessage(currentChat.id, `@${username} –ø–æ–∫–∏–Ω—É–ª(–∞) —á–∞—Ç`);

        showToast('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç', 'success');
        closeModalWithAnimation('confirmLeaveModal');
        
        currentChat = null;
        document.getElementById('currentChatName').textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç';
        document.getElementById('currentChatAvatar').textContent = '?';
        document.getElementById('chatStatus').textContent = 'offline';
        document.getElementById('leaveChatBtn').style.display = 'none';
        document.getElementById('messagesContainer').innerHTML = '<div class="message received">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AresGram! –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.</div>';
        
        await loadUserChats();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞:', error);
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ username –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
async function ensureUsername(userId, email) {
    try {
        const { data: profile, error } = await supabase
            .from('profiles')
            .select('username, first_name')
            .eq('id', userId)
            .single();

        if (error || !profile || !profile.username) {
            let baseUsername = 'user';
            if (profile?.first_name) {
                baseUsername = profile.first_name.toLowerCase();
            } else if (email) {
                baseUsername = email.split('@')[0];
            } else {
                baseUsername = `user${userId.substring(0, 8)}`;
            }
            
            let finalUsername = baseUsername;
            let counter = 1;
            
            while (true) {
                const { data: existing } = await supabase
                    .from('profiles')
                    .select('id')
                    .eq('username', finalUsername)
                    .neq('id', currentUser.id)
                    .single();
                
                if (!existing) break;
                
                finalUsername = `${baseUsername}${counter}`;
                counter++;
                if (counter > 100) break;
            }
            
            const { error: updateError } = await supabase
                .from('profiles')
                .update({ 
                    username: finalUsername,
                    first_name: profile?.first_name || finalUsername
                })
                .eq('id', userId);
                
            if (!updateError) {
                console.log('‚úÖ –°–æ–∑–¥–∞–Ω username:', finalUsername);
                return finalUsername;
            }
        }
        return profile?.username;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è username:', error);
        return `user${userId.substring(0, 8)}`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ AresGram...');
    
    const { data: { user }, error } = await supabase.auth.getUser();
    
    if (error || !user) {
        window.location.href = 'login.html';
        return;
    }
    
    currentUser = user;
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.email);
    
    document.getElementById('messageInput').disabled = false;
    document.getElementById('sendButton').disabled = false;
    
    await loadUserProfile();
    await ensureUsername(currentUser.id, currentUser.email);
    await loadUsersForSidebar();
    await loadUserChats();
    setupRealtimeSubscription();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    addTestControlsToSidebar();
    
    checkUrlParams();
    
    console.log('‚úÖ AresGram —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ)
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
async function enableNotificationsManually() {
    if (!('Notification' in window)) {
        showToast('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        return false;
    }

    console.log('üîî –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:', Notification.permission);

    // –ï—Å–ª–∏ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ - —Å—Ä–∞–∑—É —Ç–µ—Å—Ç–∏—Ä—É–µ–º
    if (Notification.permission === 'granted') {
        showToast('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã!', 'success');
        testNotificationAfterEnable();
        return true;
    }

    // –ï—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
    if (Notification.permission === 'denied') {
        showToast('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –†–∞–∑—Ä–µ—à–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞', 'warning');
        return false;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    try {
        const permission = await Notification.requestPermission();
        console.log('üîî –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', permission);
        
        if (permission === 'granted') {
            showToast('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...', 'success');
            
            // –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –°–¢–†–ê–ù–ò–¶–´ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            setTimeout(() => {
                window.location.reload();
            }, 1500);
            
            return true;
        } else {
            showToast('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã', 'warning');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        showToast('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
        return false;
    }
}

// –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è
function testNotificationAfterEnable() {
    console.log('üß™ –¢–µ—Å—Ç –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è, —Å—Ç–∞—Ç—É—Å:', Notification.permission);
    
    if (Notification.permission !== 'granted') {
        showToast('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã. –°—Ç–∞—Ç—É—Å: ' + Notification.permission, 'warning');
        return;
    }

    try {
        const notification = new Notification('AresGram - –¢–µ—Å—Ç', {
            body: '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!',
            icon: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%2327ae60" rx="20"/><text x="50" y="60" font-size="40" text-anchor="middle" fill="white">‚úì</text></svg>',
            tag: 'test'
        });
        
        notification.onclick = function() {
            window.focus();
            this.close();
        };

        notification.onshow = function() {
            showToast('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        };

        setTimeout(() => notification.close(), 5000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
    }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
function testNotificationsOneClick() {
    console.log('üîî –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫');
    
    if (!('Notification' in window)) {
        showToast('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        return;
    }

    // –ï—Å–ª–∏ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ - —Å—Ä–∞–∑—É —Ç–µ—Å—Ç–∏—Ä—É–µ–º
    if (Notification.permission === 'granted') {
        testNotificationAfterEnable();
        return;
    }

    // –ï—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
    if (Notification.permission === 'denied') {
        showToast('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞', 'warning');
        return;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    Notification.requestPermission().then(permission => {
        console.log('üîî –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å:', permission);
        
        if (permission === 'granted') {
            showToast('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...', 'success');
            
            // –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
            setTimeout(() => {
                window.location.reload();
            }, 1000);
            
        } else {
            showToast('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã', 'warning');
        }
    });
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞ (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–æ–≤)
function testSimpleNotification() {
    console.log('üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç, —Å—Ç–∞—Ç—É—Å:', Notification.permission);
    
    if (!('Notification' in window)) {
        showToast('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        return;
    }

    if (Notification.permission !== 'granted') {
        showToast(`‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã. –°—Ç–∞—Ç—É—Å: ${Notification.permission}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"`, 'warning');
        return;
    }

    try {
        const notification = new Notification('AresGram - –†–∞–±–æ—Ç–∞–µ—Ç!', {
            body: 'üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!',
            icon: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23e74c3c" rx="20"/><text x="50" y="60" font-size="40" text-anchor="middle" fill="white">A</text></svg>'
        });
        
        notification.onclick = () => {
            window.focus();
            notification.close();
        };

        notification.onshow = () => {
            showToast('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç.', 'success');
        };

        setTimeout(() => notification.close(), 4000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserProfile() {
    try {
        let { data: profile, error } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', currentUser.id)
            .single();

        if (error) {
            const username = currentUser.email ? currentUser.email.split('@')[0] : `user${currentUser.id.substring(0, 8)}`;
            const { data: newProfile, error: createError } = await supabase
                .from('profiles')
                .insert([{ 
                    id: currentUser.id, 
                    username: username,
                    first_name: username
                }])
                .select()
                .single();
                
            if (!createError && newProfile) {
                updateAvatarDisplay(newProfile);
            }
        } else if (profile) {
            updateAvatarDisplay(profile);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
function updateAvatarDisplay(profile) {
    const avatarText = profile.first_name ? profile.first_name[0].toUpperCase() : (profile.username ? profile.username[0].toUpperCase() : 'U');
    
    if (profile.avatar_url) {
        document.getElementById('userAvatar').innerHTML = `<img src="${profile.avatar_url}" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">`;
    } else {
        document.getElementById('userAvatar').textContent = avatarText;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞
async function loadUsersForSidebar() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞...');
        
        const { data: userChats, error } = await supabase
            .from('chat_members')
            .select(`
                chat_id,
                chats:chat_id (
                    chat_members (
                        user:profiles!inner (id, username, first_name, avatar_url)
                    )
                )
            `)
            .eq('user_id', currentUser.id);

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞:', error);
            return;
        }

        const usersWithChats = new Map();
        
        userChats.forEach(chatItem => {
            if (chatItem.chats && chatItem.chats.chat_members) {
                chatItem.chats.chat_members.forEach(member => {
                    if (member.user && member.user.id !== currentUser.id) {
                        const displayName = member.user.first_name || member.user.username || `user${member.user.id.substring(0, 8)}`;
                        usersWithChats.set(member.user.id, {
                            ...member.user,
                            displayName: displayName
                        });
                    }
                });
            }
        });

        allUsers = Array.from(usersWithChats.values());
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —á–∞—Ç–∞–º–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', allUsers.length);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞:', error);
        allUsers = [];
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–æ–¥–∞–ª–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async function loadAllUsersForModal() {
    try {
        const { data: users, error } = await supabase
            .from('profiles')
            .select('*')
            .neq('id', currentUser.id)
            .order('first_name', { ascending: true });

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return [];
        }

        const processedUsers = (users || []).map(user => ({
            ...user,
            displayName: user.first_name || user.username || `user${user.id.substring(0, 8)}`
        }));

        return processedUsers;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        return [];
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserChats() {
    try {
        const { data: memberships, error } = await supabase
            .from('chat_members')
            .select('chat_id')
            .eq('user_id', currentUser.id);

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ memberships:', error);
            return;
        }

        if (!memberships || memberships.length === 0) {
            userChats = [];
            renderChats();
            return;
        }

        const chatIds = memberships.map(m => m.chat_id);
        const { data: chats, error: chatsError } = await supabase
            .from('chats')
            .select('*')
            .in('id', chatIds)
            .order('last_message_at', { ascending: false });

        if (chatsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ chats:', chatsError);
            return;
        }

        userChats = chats || [];
        renderChats();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
        userChats = [];
        renderChats();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–æ–≤
function renderChats() {
    const chatsList = document.getElementById('chatsList');
    
    if (userChats.length === 0) {
        chatsList.innerHTML = `
            <div class="chat-item">
                <div class="chat-info">
                    <div class="chat-avatar">üí¨</div>
                    <div class="chat-details">
                        <div class="chat-name">–ù–µ—Ç —á–∞—Ç–æ–≤</div>
                        <div class="last-message">–ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</div>
                    </div>
                </div>
            </div>
        `;
        return;
    }

    chatsList.innerHTML = userChats.map(chat => {
        const avatarText = chat.name ? chat.name[0].toUpperCase() : '?';
        const isActive = currentChat && currentChat.id === chat.id;
        const isPrivate = chat.name && chat.name.startsWith('–ß–∞—Ç —Å ');
        
        return `
            <div class="chat-item ${isActive ? 'active' : ''}" onclick="selectChat('${chat.id}')">
                <div class="chat-info">
                    <div class="chat-avatar">${isPrivate ? 'üë§' : 'üë•'}</div>
                    <div class="chat-details">
                        <div class="chat-name">${chat.name || '–ß–∞—Ç'}</div>
                        <div class="last-message">${isPrivate ? '–õ–∏—á–Ω—ã–π —á–∞—Ç' : '–ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç'}</div>
                    </div>
                </div>
            </div>
        `;
    }).join('');
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function showUserList(users, emptyMessage) {
    let usersHTML = '';
    
    users.forEach(user => {
        usersHTML += `
            <div class="chat-item" onclick="startPrivateChat('${user.id}', '${user.displayName}')">
                <div class="chat-info">
                    <div class="chat-avatar">üë§</div>
                    <div class="chat-details">
                        <div class="chat-name">${user.displayName}</div>
                        <div class="last-message">–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</div>
                    </div>
                </div>
            </div>
        `;
    });

    document.getElementById('chatsList').innerHTML = usersHTML || `<div class="chat-item">${emptyMessage}</div>`;
}

// –ù–∞—á–∞—Ç—å –ª–∏—á–Ω—ã–π —á–∞—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function startPrivateChat(userId, username) {
    try {
        console.log('üîç –ü–æ–∏—Å–∫ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', username);
        
        const { data: existingChats, error } = await supabase
            .from('chat_members')
            .select('chat_id')
            .eq('user_id', currentUser.id);

        if (error) throw error;

        for (let member of existingChats) {
            const { data: chatMembers, error: membersError } = await supabase
                .from('chat_members')
                .select('user_id')
                .eq('chat_id', member.chat_id);

            if (!membersError && chatMembers) {
                const hasTargetUser = chatMembers.some(m => m.user_id === userId);
                if (hasTargetUser) {
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç');
                    await loadUserChats();
                    selectChat(member.chat_id);
                    showToast(`–û—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å ${username}`, 'success');
                    return;
                }
            }
        }

        console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç');
        const chatName = `–ß–∞—Ç —Å ${username}`;
        const { data: chat, error: chatError } = await supabase
            .from('chats')
            .insert([{ 
                name: chatName, 
                created_by: currentUser.id 
            }])
            .select()
            .single();

        if (chatError) throw chatError;

        const { error: membersError } = await supabase
            .from('chat_members')
            .insert([
                { chat_id: chat.id, user_id: currentUser.id },
                { chat_id: chat.id, user_id: userId }
            ]);

        if (membersError) throw membersError;

        console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω:', chat.id);
        showToast(`–ß–∞—Ç —Å ${username} —Å–æ–∑–¥–∞–Ω`, 'success');
        
        await loadUsersForSidebar();
        await loadUserChats();
        selectChat(chat.id);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    }
}

// –í—ã–±–æ—Ä —á–∞—Ç–∞
async function selectChat(chatId) {
    try {
        const { data: chat, error } = await supabase
            .from('chats')
            .select('*')
            .eq('id', chatId)
            .single();

        if (error) throw error;

        currentChat = chat;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤)
        let otherUserId = null;
        let otherUserName = null;
        
        if (chat.name && chat.name.startsWith('–ß–∞—Ç —Å ')) {
            const { data: members, error: membersError } = await supabase
                .from('chat_members')
                .select('user_id')
                .eq('chat_id', chatId)
                .neq('user_id', currentUser.id);

            if (!membersError && members && members.length > 0) {
                otherUserId = members[0].user_id;
                // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const { data: userProfile } = await supabase
                    .from('profiles')
                    .select('first_name, username')
                    .eq('id', otherUserId)
                    .single();
                    
                if (userProfile) {
                    otherUserName = userProfile.first_name || userProfile.username;
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        const chatHeaderHTML = `
            <div class="chat-header-info">
                <div class="user-avatar clickable-avatar" id="currentChatAvatar" 
                     onclick="${otherUserId ? `showUserProfile('${otherUserId}')` : ''}" 
                     style="cursor: ${otherUserId ? 'pointer' : 'default'};">
                    ${chat.name ? chat.name[0].toUpperCase() : '?'}
                </div>
                <div>
                    <h3 class="clickable-username" 
                        onclick="${otherUserId ? `showUserProfile('${otherUserId}')` : ''}"
                        style="cursor: ${otherUserId ? 'pointer' : 'default'}; margin-bottom: 5px;">
                        ${chat.name || '–ß–∞—Ç'}
                    </h3>
                    <span class="status" id="chatStatus">online</span>
                </div>
            </div>
        `;
        
        document.querySelector('.chat-header').innerHTML = chatHeaderHTML + `
            <div>
                <button class="logout-btn" id="leaveChatBtn" onclick="leaveChat()" style="display: ${chat.name && chat.name.startsWith('–ß–∞—Ç —Å ') ? 'none' : 'block'};">–ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç</button>
            </div>
        `;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if (otherUserId) {
            currentChat.otherUserId = otherUserId;
            currentChat.otherUserName = otherUserName;
        }
        
        await loadMessages(chatId);
        await loadChatMembers(chatId);
        renderChats();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
// –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
async function loadChatMembers(chatId) {
    try {
        const { data: members, error } = await supabase
            .from('chat_members')
            .select(`
                user_id,
                profiles:user_id (username, first_name)
            `)
            .eq('chat_id', chatId);

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
            return;
        }

        if (members && members.length > 0) {
            const memberNames = members.map(m => {
                if (m.profiles) {
                    return m.profiles.first_name || m.profiles.username || `user${m.user_id.substring(0, 8)}`;
                }
                return `user${m.user_id.substring(0, 8)}`;
            }).join(', ');
            
            document.getElementById('chatStatus').textContent = `–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${memberNames}`;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
    }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –†–£–ß–ù–û–ì–û –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ!)
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –†–£–ß–ù–û–ì–û –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function enableNotificationsManually() {
    if (!('Notification' in window)) {
        showToast('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        return false;
    }

    console.log('üîî –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', Notification.permission);

    if (Notification.permission === 'granted') {
        showToast('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã!', 'success');
        // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        setTimeout(() => testSimpleNotification(), 500);
        return true;
    }

    if (Notification.permission === 'denied') {
        showToast('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞', 'warning');
        return false;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    try {
        const permission = await Notification.requestPermission();
        console.log('üîî –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞:', permission);
        
        if (permission === 'granted') {
            showToast('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!', 'success');
            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            setTimeout(() => {
                testSimpleNotification();
            }, 1000);
            return true;
        } else {
            showToast('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã', 'warning');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        showToast('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
        return false;
    }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function testSimpleNotification() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Å—Ç–∞—Ç—É—Å:', Notification.permission);
    
    if (!('Notification' in window)) {
        showToast('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    if (Notification.permission !== 'granted') {
        showToast('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ. –°—Ç–∞—Ç—É—Å: ' + Notification.permission, 'warning');
        return;
    }

    try {
        console.log('üîî –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');
        const notification = new Notification('AresGram - –¢–µ—Å—Ç', {
            body: '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!',
            icon: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%23e74c3c" rx="20"/><text x="50" y="60" font-size="40" text-anchor="middle" fill="white">A</text></svg>',
            tag: 'test-notification'
        });
        
        notification.onclick = function() {
            console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–∫–Ω—É—Ç–æ');
            window.focus();
            this.close();
        };

        notification.onshow = function() {
            console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ');
            showToast('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        };

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.close) {
                notification.close();
                console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
            }
        }, 5000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        showToast('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤—Å–µ –≤ –æ–¥–Ω–æ–º
function testNotificationsOneClick() {
    console.log('üîî –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫');
    
    if (!('Notification' in window)) {
        showToast('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        return;
    }

    const handlePermission = (permission) => {
        console.log('üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', permission);
        
        if (permission === 'granted') {
            showToast('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç...', 'success');
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏–ª—Å—è
            setTimeout(() => {
                try {
                    const notification = new Notification('AresGram - –£—Å–ø–µ—Ö!', {
                        body: '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ç–ª–∏—á–Ω–æ!',
                        icon: 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect width="100" height="100" fill="%2327ae60" rx="20"/><text x="50" y="60" font-size="40" text-anchor="middle" fill="white">‚úì</text></svg>'
                    });
                    
                    notification.onclick = () => {
                        window.focus();
                        notification.close();
                    };
                    
                    setTimeout(() => notification.close(), 5000);
                    
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
                    showToast('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
                }
            }, 500);
            
        } else if (permission === 'default') {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            Notification.requestPermission().then(handlePermission);
        } else {
            showToast('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã', 'warning');
        }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    handlePermission(Notification.permission);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function loadMessages(chatId) {
    try {
        console.log('üì® –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞:', chatId);
        
        const { data: messages, error } = await supabase
            .from('messages')
            .select('*')
            .eq('chat_id', chatId)
            .order('created_at', { ascending: true });

        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            throw error;
        }

        const messagesContainer = document.getElementById('messagesContainer');
        messagesContainer.innerHTML = '';

        if (messages && messages.length > 0) {
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', messages.length);
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è—Ö
            const senderIds = [...new Set(messages.map(m => m.sender_id))];
            const { data: senders, error: sendersError } = await supabase
                .from('profiles')
                .select('id, first_name, username, avatar_url')
                .in('id', senderIds);

            const sendersMap = {};
            if (!sendersError && senders) {
                senders.forEach(sender => {
                    sendersMap[sender.id] = sender;
                });
            }
            
            messages.forEach(message => {
                const isSent = message.sender_id === currentUser.id;
                const isSystem = message.is_system;
                const sender = sendersMap[message.sender_id];
                const senderName = sender ? (sender.first_name || sender.username) : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                
                const messageElement = document.createElement('div');
                
                if (isSystem) {
                    messageElement.className = 'message system';
                    messageElement.innerHTML = `
                        <div class="system-message">${message.text}</div>
                        <div class="message-time">
                            ${new Date(message.created_at).toLocaleTimeString()}
                        </div>
                    `;
                } else {
                    messageElement.className = `message ${isSent ? 'sent' : 'received'}`;
                    
                    if (!isSent && sender) {
                        // –î–ª—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                        messageElement.innerHTML = `
                            <div class="message-sender-info">
                                <div class="message-avatar clickable-avatar" 
                                     onclick="showUserProfile('${message.sender_id}')"
                                     style="cursor: pointer;">
                                    ${sender.avatar_url ? 
                                        `<img src="${sender.avatar_url}" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;">` :
                                        senderName[0].toUpperCase()
                                    }
                                </div>
                                <div class="message-content">
                                    <div class="message-sender-name clickable-username" 
                                         onclick="showUserProfile('${message.sender_id}')"
                                         style="cursor: pointer;">
                                        ${senderName}
                                    </div>
                                    <div class="message-text">${message.text}</div>
                                    <div class="message-time">
                                        ${new Date(message.created_at).toLocaleTimeString()}
                                    </div>
                                </div>
                            </div>
                        `;
                    } else {
                        // –î–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –æ–±—ã—á–Ω—ã–π –≤–∏–¥
                        messageElement.innerHTML = `
                            ${message.text}
                            <div class="message-time">
                                ${new Date(message.created_at).toLocaleTimeString()}
                            </div>
                        `;
                    }
                }
                
                messagesContainer.appendChild(messageElement);
            });
        } else {
            console.log('üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ');
            messagesContainer.innerHTML = '<div class="message received">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ!</div>';
        }

        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        document.getElementById('messagesContainer').innerHTML = '<div class="message received">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</div>';
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const messageText = messageInput.value.trim();

    if (!messageText || !currentChat) {
        showToast('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', 'warning');
        return;
    }

    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageText);
        
        const { data, error } = await supabase
            .from('messages')
            .insert([{
                chat_id: currentChat.id,
                sender_id: currentUser.id,
                text: messageText
            }])
            .select();

        if (error) throw error;

        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID:', data[0].id);
        messageInput.value = '';
        
        // –¢–û–õ–¨–ö–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        await supabase
            .from('chats')
            .update({ last_message_at: new Date() })
            .eq('id', currentChat.id);

        // –£–ë–ï–†–ò–¢–ï –æ—Ç–ø—Ä–∞–≤–∫—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç—Å—é–¥–∞
        // await sendPushNotificationToChatMembers(currentChat.id, messageText);
        
        await loadMessages(currentChat.id);
        await loadUserChats();
            
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        showToast('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + error.message, 'error');
    }
}

// Real-time –ø–æ–¥–ø–∏—Å–∫–∞
function setupRealtimeSubscription() {
    try {
        // –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (window._aresgram_message_channel && window._aresgram_message_channel.unsubscribe) {
            try { window._aresgram_message_channel.unsubscribe(); } catch (e) { /* ignore */ }
            window._aresgram_message_channel = null;
        }

        // –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª –≤ Supabase Realtime (v2 API)
        const channel = supabase.channel('public:messages');

        channel.on('postgres_changes',
            { event: 'INSERT', schema: 'public', table: 'messages' },
            payload => {
                console.log('Realtime INSERT payload:', payload);
                const record = payload.new || payload.record || payload;

                // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                if (!record) return;

                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (record.sender_id === currentUser?.id) return;

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                handleIncomingMessageNotification(record);

                // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç ‚Äî —Ç–æ—Ç –∂–µ, –¥–æ–±–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é loadMessages/append
                // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å loadMessages(currentChat.id) –∏–ª–∏ appendMessage(record)
                // –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –Ω—É–∂–Ω—ã–π —á–∞—Ç - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                if (currentChat && currentChat.id === record.chat_id) {
                    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ UI
                    if (typeof appendMessage === 'function') {
                        try { appendMessage(record); } catch (e) { console.error(e); }
                    } else {
                        // fallback: –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
                        try { loadMessages(currentChat.id); } catch (e) { console.error(e); }
                    }
                } else {
                    // –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç ‚Äî –º–æ–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å —á–∞—Ç –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π (–µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ç–∞–∫–∞—è –ª–æ–≥–∏–∫–∞)
                    // showToast(`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ`, 'info');
                }
            }
        );

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
        channel.subscribe(status => {
            console.log('Supabase channel status:', status);
        });

        // –°–æ—Ö—Ä–∞–Ω–∏–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏ –≤ –±—É–¥—É—â–µ–º
        window._aresgram_message_channel = channel;

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ setupRealtimeSubscription:', err);
    }
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async function checkForNewMessages() {
    if (currentChat) {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞:', currentChat.name);
        await loadMessages(currentChat.id);
    }
    await loadUserChats();
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function refreshUsers() {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞...');
    await loadUsersForSidebar();
    
    if (allUsers.length === 0) {
        showToast('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω–∞—á–∞—Ç–æ –æ–±—â–µ–Ω–∏–µ!', 'info');
    } else {
        showToast(`–ù–∞–π–¥–µ–Ω–æ ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —á–∞—Ç–∞–º–∏`, 'success');
        searchUsers();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
async function createGroupChat() {
    const chatName = document.getElementById('newChatName').value.trim();
    
    if (!chatName) {
        showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞!', 'warning');
        return;
    }

    try {
        const { data: chat, error } = await supabase
            .from('chats')
            .insert([{ name: chatName, created_by: currentUser.id }])
            .select()
            .single();

        if (error) throw error;

        const { error: memberError } = await supabase
            .from('chat_members')
            .insert([{ chat_id: chat.id, user_id: currentUser.id }]);

        if (memberError) throw memberError;

        hideCreateChatModal();
        document.getElementById('newChatName').value = '';
        
        showToast(`–ß–∞—Ç "${chatName}" —Å–æ–∑–¥–∞–Ω`, 'success');
        await loadUserChats();
        selectChat(chat.id);
        showAddMembersModal(chat.id, chatName);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
function showAddMembersModal(chatId, chatName) {
    const modalHTML = `
        <div class="modal" id="addMembersModal" style="display: flex;">
            <div class="modal-content">
                <h2>–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ "${chatName}"</h2>
                <p style="color: #666; margin-bottom: 15px;">–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>
                <input type="text" class="modal-input" id="memberSearchInput" placeholder="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..." onkeyup="searchMembers('${chatId}')">
                <div id="membersList" style="max-height: 400px; overflow-y: auto; margin: 15px 0;"></div>
                <div class="modal-buttons">
                    <button class="modal-btn secondary" onclick="closeAddMembersModal()">–ì–æ—Ç–æ–≤–æ</button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    showAllMembersForAdd(chatId);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async function showAllMembersForAdd(chatId) {
    const membersList = document.getElementById('membersList');
    if (!membersList) return;

    const allUsersForModal = await loadAllUsersForModal();

    if (allUsersForModal.length === 0) {
        membersList.innerHTML = '<div style="padding: 20px; text-align: center; color: #666;">–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';
        return;
    }

    let membersHTML = '<div style="padding: 10px; font-weight: bold; border-bottom: 1px solid #ddd;">–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</div>';
    
    allUsersForModal.forEach(user => {
        membersHTML += `
            <div class="user-list-item">
                <div class="user-info-modal">
                    <div class="user-avatar-small">${user.displayName[0].toUpperCase()}</div>
                    <div class="user-details">
                        <div class="user-name">${user.displayName}</div>
                    </div>
                </div>
                <button class="modal-btn primary" onclick="addUserToChat('${chatId}', '${user.id}', '${user.displayName}')" style="padding: 8px 15px;">
                    –î–æ–±–∞–≤–∏—Ç—å
                </button>
            </div>
        `;
    });

    membersList.innerHTML = membersHTML;
}

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async function searchMembers(chatId) {
    const searchTerm = document.getElementById('memberSearchInput').value.trim().toLowerCase();
    const membersList = document.getElementById('membersList');
    
    if (!membersList) return;
    
    if (searchTerm.length === 0) {
        showAllMembersForAdd(chatId);
        return;
    }

    const allUsersForModal = await loadAllUsersForModal();
    
    const filteredUsers = allUsersForModal.filter(user => 
        user.displayName && user.displayName.toLowerCase().includes(searchTerm)
    );

    if (filteredUsers.length === 0) {
        membersList.innerHTML = '<div style="padding: 20px; text-align: center; color: #666;">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }

    let membersHTML = '<div style="padding: 10px; font-weight: bold; border-bottom: 1px solid #ddd;">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</div>';
    
    filteredUsers.forEach(user => {
        membersHTML += `
            <div class="user-list-item">
                <div class="user-info-modal">
                    <div class="user-avatar-small">${user.displayName[0].toUpperCase()}</div>
                    <div class="user-details">
                        <div class="user-name">${user.displayName}</div>
                    </div>
                </div>
                <button class="modal-btn primary" onclick="addUserToChat('${chatId}', '${user.id}', '${user.displayName}')" style="padding: 8px 15px;">
                    –î–æ–±–∞–≤–∏—Ç—å
                </button>
            </div>
        `;
    });

    membersList.innerHTML = membersHTML;
}

// –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
async function addUserToChat(chatId, userId, username) {
    try {
        const { data: existing, error: checkError } = await supabase
            .from('chat_members')
            .select('id')
            .eq('chat_id', chatId)
            .eq('user_id', userId)
            .single();

        if (existing) {
            showToast(`${username} —É–∂–µ –≤ —á–∞—Ç–µ!`, 'warning');
            return;
        }

        const { data: members, error: countError } = await supabase
            .from('chat_members')
            .select('id')
            .eq('chat_id', chatId);

        if (!countError && members && members.length >= 100) {
            showToast('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!', 'warning');
            return;
        }

        const { error } = await supabase
            .from('chat_members')
            .insert([{ chat_id: chatId, user_id: userId }]);

        if (error) throw error;

        await sendSystemMessage(chatId, `@${username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç`);

        showToast(`‚úÖ ${username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç!`, 'success');
        await loadChatMembers(chatId);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', error);
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
function closeAddMembersModal() {
    const modal = document.getElementById('addMembersModal');
    if (modal) modal.remove();
}

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
async function logout() {
    await supabase.auth.signOut();
    window.location.href = 'login.html';
}

// –§—É–Ω–∫—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function showCreateChatModal() {
    document.getElementById('createChatModal').style.display = 'flex';
}

function hideCreateChatModal() {
    document.getElementById('createChatModal').style.display = 'none';
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function getChatIcon() {
    const svgString = `<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64"><rect width="64" height="64" rx="12" fill="#e74c3c"/><circle cx="32" cy="32" r="12" fill="white"/><circle cx="25" cy="28" r="2" fill="#e74c3c"/><circle cx="39" cy="28" r="2" fill="#e74c3c"/><path d="M25 38 Q32 42 39 38" stroke="#e74c3c" stroke-width="2" fill="none"/></svg>`;
    return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));
}

function getMessageIcon() {
    const svgString = `<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64"><rect width="64" height="64" rx="12" fill="#3498db"/><rect x="12" y="18" width="40" height="28" rx="4" fill="white" stroke="#3498db" stroke-width="2"/><circle cx="22" cy="26" r="1.5" fill="#3498db"/><circle cx="32" cy="26" r="1.5" fill="#3498db"/><circle cx="42" cy="26" r="1.5" fill="#3498db"/><rect x="16" y="32" width="32" height="2" rx="1" fill="#3498db"/><rect x="16" y="36" width="24" height="2" rx="1" fill="#3498db"/></svg>`;
    return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));
}

function getGroupIcon() {
    const svgString = `<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64"><rect width="64" height="64" rx="12" fill="#9b59b6"/><circle cx="20" cy="26" r="6" fill="white"/><circle cx="44" cy="26" r="6" fill="white"/><circle cx="32" cy="38" r="8" fill="white"/><circle cx="16" cy="22" r="2" fill="#9b59b6"/><circle cx="48" cy="22" r="2" fill="#9b59b6"/><circle cx="28" cy="36" r="1.5" fill="#9b59b6"/><circle cx="36" cy="36" r="1.5" fill="#9b59b6"/><path d="M28 42 Q32 45 36 42" stroke="#9b59b6" stroke-width="1.5" fill="none"/></svg>`;
    return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));
}

function getAlertIcon() {
    const svgString = `<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64"><rect width="64" height="64" rx="12" fill="#e67e22"/><path d="M32 16 L32 36 M32 42 L32 46" stroke="white" stroke-width="3" stroke-linecap="round"/><circle cx="32" cy="32" r="2" fill="white"/></svg>`;
    return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));
}

function getSuccessIcon() {
    const svgString = `<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64"><rect width="64" height="64" rx="12" fill="#27ae60"/><path d="M20 32 L28 40 L44 24" stroke="white" stroke-width="4" stroke-linecap="round" stroke-linejoin="round" fill="none"/></svg>`;
    return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));
}

function getDefaultIcon() {
    const svgString = `<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64"><rect width="64" height="64" rx="12" fill="#e74c3c"/><text x="32" y="40" font-family="Arial" font-size="24" text-anchor="middle" fill="white">A</text></svg>`;
    return 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString)));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Windows
function showWindowsNotification(title, message, options = {}) {
    if (!('Notification' in window)) {
        console.log('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return null;
    }

    if (Notification.permission !== 'granted') {
        console.log('‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:', Notification.permission);
        return null;
    }

    const notificationOptions = {
        icon: options.icon || getDefaultIcon(),
        badge: options.badge || getDefaultIcon(),
        body: message,
        tag: options.tag || 'aresgram-notification',
        requireInteraction: options.requireInteraction || false,
        silent: options.silent || false,
        ...options
    };

    try {
        console.log('üîî –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', { title, message });
        
        const notification = new Notification(title, notificationOptions);
        
        // –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        notification.onclick = function(event) {
            console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–∫–Ω—É—Ç–æ');
            window.focus();
            this.close();
            
            // –í—ã–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (typeof options.onClick === 'function') {
                options.onClick(event);
            }
        };

        notification.onerror = function(error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        };

        notification.onshow = function() {
            console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ');
        };

        notification.onclose = function() {
            console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        };

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        if (options.duration) {
            setTimeout(() => {
                if (notification.close) {
                    notification.close();
                }
            }, options.duration);
        }

        return notification;
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Windows
async function sendWindowsNotificationTest() {
    console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if (!('Notification' in window)) {
        showToast('‚ùå –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    if (Notification.permission !== 'granted') {
        console.log('üîî –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ...');
        const permission = await Notification.requestPermission();
        
        if (permission !== 'granted') {
            showToast('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ', 'warning');
            return;
        }
    }

    const testMessage = "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Windows —Ä–∞–±–æ—Ç–∞–µ—Ç!";
    const chatName = currentChat ? currentChat.name : "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç";
    
    console.log('üîî –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');
    
    const notification = showWindowsNotification(
        `üí¨ ${chatName}`,
        testMessage,
        {
            icon: getChatIcon(),
            requireInteraction: true,
            duration: 10000,
            onClick: () => {
                console.log('üîî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª');
                if (currentChat) {
                    selectChat(currentChat.id);
                }
            }
        }
    );

    if (notification) {
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ');
        showToast('‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        notification.addEventListener('click', () => {
            console.log('üîî addEventListener: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–∫–Ω—É—Ç–æ');
            window.focus();
        });
    } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
        showToast('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
    }
}

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)
function testSimpleNotification() {
    if (!('Notification' in window)) {
        showToast('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'error');
        return;
    }

    if (Notification.permission !== 'granted') {
        showToast('‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'warning');
        return;
    }

    try {
        const notification = new Notification('AresGram Test', {
            body: '‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            icon: '/favicon.ico',
            tag: 'test'
        });
        
        notification.onclick = function() {
            console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ!');
            window.focus();
            this.close();
        };
        
        setTimeout(() => {
            if (notification.close) notification.close();
        }, 5000);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        showToast('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function testWindowsNotifications() {
    const notificationTypes = [
        {
            title: "üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            message: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
            options: {
                icon: getMessageIcon(),
                requireInteraction: false
            }
        },
        {
            title: "üë• –ì—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç",
            message: "–ú–∞—Ä–∏—è: –†–µ–±—è—Ç–∞, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —ç—Ç–æ!",
            options: {
                icon: getGroupIcon(),
                requireInteraction: true
            }
        },
        {
            title: "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            message: "–£ –≤–∞—Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            options: {
                icon: getAlertIcon(),
                requireInteraction: true,
                actions: [
                    {
                        action: 'view',
                        title: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
                    }
                ]
            }
        },
        {
            title: "‚úÖ –£—Å–ø–µ—Ö",
            message: "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
            options: {
                icon: getSuccessIcon(),
                requireInteraction: false
            }
        }
    ];

    let delay = 0;
    notificationTypes.forEach((type, index) => {
        setTimeout(() => {
            const notification = showWindowsNotification(
                type.title,
                type.message,
                {
                    ...type.options,
                    onClick: () => {
                        console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${index + 1} –∫–ª–∏–∫–Ω—É—Ç–æ`);
                        if (currentChat) {
                            selectChat(currentChat.id);
                        }
                    }
                }
            );
            
            if (notification) {
                console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${index + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
            }
        }, delay);
        
        delay += 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    });

    showToast(`–ó–∞–ø—É—â–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${notificationTypes.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`, 'info');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function setupWindowsNotifications() {
    if (!('Notification' in window)) {
        showToast('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'warning');
        return;
    }

    const modalHTML = `
        <div class="modal-overlay" id="notificationsSetupModal" style="display: flex;">
            <div class="modal-content">
                <h2>üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Windows</h2>
                
                <div style="margin: 20px 0;">
                    <p><strong>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</strong> ${Notification.permission}</p>
                    <p style="font-size: 14px; color: #666; margin-top: 10px;">
                        –†–∞–∑—Ä–µ—à–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.
                    </p>
                </div>
                
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
                    <h4>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</h4>
                    <ul style="margin: 10px 0; padding-left: 20px;">
                        <li>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</li>
                        <li>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç</li>
                        <li>–†–∞–±–æ—Ç—É –¥–∞–∂–µ –∫–æ–≥–¥–∞ —Å–∞–π—Ç –∑–∞–∫—Ä—ã—Ç</li>
                        <li>–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Windows</li>
                    </ul>
                </div>
                
                <div class="modal-buttons">
                    <button class="modal-btn secondary" onclick="closeModalWithAnimation('notificationsSetupModal')">
                        –ü–æ–∑–∂–µ
                    </button>
                    <button class="modal-btn primary" onclick="requestNotificationPermission()">
                        üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
async function requestNotificationPermission() {
    try {
        if (!('Notification' in window)) {
            showToast('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Web Notifications', 'error');
            return false;
        }

        // –ï—Å–ª–∏ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ ‚Äî –æ–±–Ω–æ–≤–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (Notification.permission === 'granted') {
            showToast('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã', 'success');
            document.getElementById('enableNotificationsBtn').style.display = 'none';
            return true;
        }

        // –ü—Ä–æ—Å–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        const permission = await Notification.requestPermission();
        if (permission === 'granted') {
            showToast('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!', 'success');
            document.getElementById('enableNotificationsBtn').style.display = 'none';
            return true;
        } else if (permission === 'denied') {
            showToast('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –†–∞–∑—Ä–µ—à–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.', 'warning');
            return false;
        } else {
            showToast('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ', 'warning');
            return false;
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', err);
        showToast('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'error');
        return false;
    }
}
function handleIncomingMessageNotification(record) {
    try {
        // record –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: { id, chat_id, sender_id, text, ... }
        const title = record.sender_name || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ';
        const body = (record.text && record.text.length > 120) ? record.text.slice(0, 120) + '‚Ä¶' : (record.text || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        const chatId = record.chat_id;

        // –ï—Å–ª–∏ –Ω–µ—Ç permissions ‚Äî –Ω–µ —Å–æ–∑–¥–∞—ë–º
        if (!('Notification' in window) || Notification.permission !== 'granted') {
            console.log('Notifications unavailable or not granted');
            return;
        }

        const options = {
            body: body,
            icon: '/icon-192x192.png', // –º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ
            data: {
                chatId: chatId,
                messageId: record.id
            },
            tag: `message-${chatId}` // —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —á–∞—Ç—É
        };

        const notif = new Notification(title, options);

        notif.onclick = function (ev) {
            ev.preventDefault();
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º –æ–∫–Ω–æ/–≤–∫–ª–∞–¥–∫—É
            try { window.focus(); } catch (e) {}
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç ‚Äî –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è selectChat –¥–æ—Å—Ç—É–ø–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
            if (typeof selectChat === 'function') {
                // –ù–µ–º–Ω–æ–≥–æ –∑–∞–¥–µ—Ä–∂–∏–º —á—Ç–æ–±—ã –æ–∫–Ω–æ —É—Å–ø–µ–ª–æ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è
                setTimeout(() => {
                    try { selectChat(chatId); } catch (err) { console.error(err); }
                }, 200);
            } else {
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –∏–∑–º–µ–Ω–∏–º URL, –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —Ä–æ—É—Ç–∏–Ω–≥ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É chat
                if (window.location) {
                    const url = new URL(window.location.href);
                    url.searchParams.set('chat', chatId);
                    window.location.href = url.toString();
                }
            }
            notif.close();
        };

        // –ê–≤—Ç–æ-—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            try { notif.close(); } catch (e) {}
        }, 8000);

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', err);
    }
}


// –§—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function simulateIncomingMessage() {
    if (!currentChat) {
        showToast('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç!', 'warning');
        return;
    }

    const testUsers = [
        { name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", message: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?" },
        { name: "–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤", message: "–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!" },
        { name: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞", message: "–¢—ã –≤–∏–¥–µ–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è?" },
        { name: "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤", message: "–ú–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?" }
    ];

    const randomUser = testUsers[Math.floor(Math.random() * testUsers.length)];
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = showWindowsNotification(
        `üí¨ ${randomUser.name}`,
        randomUser.message,
        {
            icon: getMessageIcon(),
            requireInteraction: true,
            actions: [
                {
                    action: 'open-chat',
                    title: 'üìÇ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç'
                },
                {
                    action: 'mark-read',
                    title: '‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ'
                }
            ],
            onClick: () => {
                console.log('üîî –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç');
                selectChat(currentChat.id);
            }
        }
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if (notification) {
        notification.addEventListener('notificationclick', (event) => {
            event.preventDefault();
            
            switch (event.action) {
                case 'open-chat':
                    console.log('üîî –î–µ–π—Å—Ç–≤–∏–µ: –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç');
                    window.focus();
                    selectChat(currentChat.id);
                    break;
                    
                case 'mark-read':
                    console.log('üîî –î–µ–π—Å—Ç–≤–∏–µ: –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º');
                    showToast('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ', 'info');
                    break;
                    
                default:
                    console.log('üîî –î–µ–π—Å—Ç–≤–∏–µ: –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é');
                    window.focus();
                    selectChat(currentChat.id);
            }
            
            notification.close();
        });

        showToast(`–°–∏–º—É–ª—è—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${randomUser.name}`, 'success');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function checkNotificationSupport() {
    const support = {
        'Notification API': 'Notification' in window,
        'Permission': Notification.permission,
        'Service Worker': 'serviceWorker' in navigator,
        'Push Manager': 'PushManager' in window,
        'Browser': detectBrowser()
    };
    
    let message = 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n';
    Object.entries(support).forEach(([key, value]) => {
        message += `${key}: ${value}\n`;
    });
    
    alert(message);
}

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
function detectBrowser() {
    const ua = navigator.userAgent;
    if (ua.includes('Chrome')) return 'Chrome';
    if (ua.includes('Firefox')) return 'Firefox';
    if (ua.includes('Safari')) return 'Safari';
    if (ua.includes('Edge')) return 'Edge';
    return '–î—Ä—É–≥–æ–π';
}

// –î–æ–±–∞–≤—å—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ —Å–∞–π–¥–±–∞—Ä
function addTestControlsToSidebar() {
    const chatsControls = document.querySelector('.chats-controls');
    
    const testControlHTML = `
        <button class="control-button" onclick="showTestControlPanel()" style="background: #9b59b6;">
            üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        </button>
    `;
    
    chatsControls.insertAdjacentHTML('beforeend', testControlHTML);
}

// –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function showTestControlPanel() {
    const modalHTML = `
        <div class="modal-overlay" id="testControlModal" style="display: flex;">
            <div class="modal-content">
                <h2>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h2>
                
                <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
                    <h4>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <strong style="color: ${
                        Notification.permission === 'granted' ? '#27ae60' : 
                        Notification.permission === 'denied' ? '#e74c3c' : '#f39c12'
                    }">${Notification.permission}</strong></h4>
                    
                    ${Notification.permission === 'granted' ? `
                    <div style="color: #27ae60; font-weight: bold;">
                        ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.
                    </div>
                    ` : Notification.permission === 'denied' ? `
                    <div style="color: #e74c3c;">
                        ‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –†–∞–∑—Ä–µ—à–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.
                    </div>
                    ` : `
                    <div style="color: #f39c12;">
                        ‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è".
                    </div>
                    `}
                </div>
                
                <div style="display: grid; gap: 10px; margin: 20px 0;">
                    ${Notification.permission !== 'granted' ? `
                    <button class="modal-btn primary" onclick="testNotificationsOneClick()">
                        üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    </button>
                    ` : ''}
                    
                    <button class="modal-btn" style="background: #27ae60;" onclick="testSimpleNotification()" 
                            ${Notification.permission !== 'granted' ? 'disabled' : ''}>
                        üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    </button>
                </div>
                
                ${Notification.permission !== 'granted' ? `
                <div style="background: #e8f4fd; padding: 10px; border-radius: 5px; margin: 10px 0; border: 1px solid #3498db;">
                    <small>üí° <strong>–ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</strong></small>
                </div>
                ` : ''}
                
                <div class="modal-buttons">
                    <button class="modal-btn secondary" onclick="closeModalWithAnimation('testControlModal')">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
}
// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
function checkUrlParams() {
    const urlParams = new URLSearchParams(window.location.search);
    const chatId = urlParams.get('chat');
    
    if (chatId) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
        setTimeout(() => {
            selectChat(chatId);
            // –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL
            window.history.replaceState({}, document.title, window.location.pathname);
        }, 1000);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('messageInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    document.getElementById('searchInput').addEventListener('input', searchUsers);

    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            e.target.style.display = 'none';
        }
    });

    initApp();
});